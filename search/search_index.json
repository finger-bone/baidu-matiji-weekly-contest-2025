{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u767e\u5ea6\u7801\u9898\u96c6\u5468\u8d5b 2025 09 \u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570 \u5feb\u901f\u5e42 \u793e\u56e2\u6d3b\u52a8 \u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811 \u795e\u5947\u7684\u6811 \u6811\u54c8\u5e0c","title":"\u767e\u5ea6\u7801\u9898\u96c6\u5468\u8d5b 2025"},{"location":"#2025","text":"","title":"\u767e\u5ea6\u7801\u9898\u96c6\u5468\u8d5b 2025"},{"location":"#09","text":"\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570 \u5feb\u901f\u5e42 \u793e\u56e2\u6d3b\u52a8 \u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811 \u795e\u5947\u7684\u6811 \u6811\u54c8\u5e0c","title":"09"},{"location":"09/03/","text":"\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570 https://www.matiji.net/exam/dohomework/8235/5 \u9898\u5e72 \u5c0f\u7801\u54e5\u6700\u8fd1\u5728\u5b66\u4e60\u4e8c\u8fdb\u5236\u6570\u3002 \u6709\u4e00\u5929\uff0c\u5c0f\u7801\u54e5\u60f3\u5230\u4f20\u7edf\u7684\u4e8c\u8fdb\u5236\u6570\u90fd\u662f\u4e00\u7ef4\u7684\uff0c\u662f\u5426\u80fd\u5b9a\u4e49\u4e00\u79cd\u4e8c\u7ef4\u7684\u4e8c\u8fdb\u5236\u6570\u3002 \u5c0f\u7801\u54e5\u5c06\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u5b9a\u4e49\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff1a \u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u4e3a\u4e00\u4e2a 0/1 \u77e9\u9635\uff0c\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff1b \u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u4e0e\u6b63\u5e38\u81ea\u7136\u6570\u5f62\u6210\u53cc\u5c04\u5173\u7cfb\uff0c\u4e0d\u59a8\u8bb0\u8fd9\u79cd\u5173\u7cfb\u4e3a f \uff1b \u5b9a\u4e49\u51680\u77e9\u9635\u6240\u5bf9\u5e94\u7684\u6574\u6570\u503c\u4e3a 0\uff0c\u5373 f(0)=A \uff0c A \u4e3a\u5168 0 \u77e9\u9635\uff1b \u82e5 f(x)=A , f(x + 1)=B \uff0c\u5219 A \u4e0e B \u6709\u4ee5\u4e0b\u5bf9\u5e94\u5173\u7cfb\uff0c\u6211\u4eec\u5bf9 A \u7684 (0\uff0c0) \u8fd9\u4e00\u4f4d\u52a0\u4e00\uff0c\u5e76\u8fdb\u884c\u8fdb\u4f4d\u64cd\u4f5c\uff0c\u5219\u80fd\u5f97\u5230\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570 B\uff1b \u8fdb\u4f4d\u64cd\u4f5c\u88ab\u5b9a\u4e49\u5982\u4e0b\uff1a\u82e5 S_{i,j}=1 \uff0c\u5e76\u4e14\u5728\u8fd9\u4e00\u4f4d\u4e0a\u52a01\u65f6\uff0c\u4f1a\u53d1\u751f\u5982\u4e0b\u8fdb\u4f4d\uff1a\u4f7f S_{i,j}=0 \uff0c\u5e76\u5728 S_{i + 1,j}=1 S_{i,j + 1}=1 \u4f4d\u4e0a\u52a01\u3002 \u5c0f\u7801\u54e5\u60f3\u77e5\u9053\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684 x \uff0c\u5176\u5bf9\u4e8e\u7684\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u4e3a\u591a\u5c11\uff0c\u5373f\uff08x\uff09\u4e3a\u591a\u5c11\uff0c\u7531\u4e8e\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u53ef\u80fd\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8f93\u51faf\uff08x\uff09\u7684\u4e0b\u6807\u4ece0\u5230n\u3002 \u601d\u8def n \\leq 1000, x \\leq 10^{18} \uff0c\u663e\u7136\u590d\u6742\u5ea6\u5927\u6982 O(n^2 \\log x) \u4ee5\u4e0b\u3002 O(n^2) \u53ef\u4ee5\u904d\u5386\u77e9\u9635\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u904d\u5386 O(\\log x) \u6b21\u77e9\u9635\u3002 \u663e\u7136 f \u662f\u540c\u6001\uff0c\u56e0\u6b64\u77e9\u9635\u548c\u7b49\u4e8e\u6570\u7684\u548c\u3002\u800c\u4e14\u5f97\u5230\u7684\u7684\u77e9\u9635\u663e\u7136\u662f\u5bf9\u79f0\u7684\uff0c\u56e0\u4e3a f(0) \u662f\u5bf9\u79f0\u7684\uff0c\u800c\u6240\u6709\u7684\u8fdb\u4f4d\u64cd\u4f5c\u4e5f\u662f\u5bf9\u79f0\u7684\u3002 \u540c\u65f6\uff0c\u4efb\u610f\u4e24\u4e2a\u77e9\u9635\u7684\u52a0\u6cd5\u4e5f\u662f\u663e\u7136\u7684\uff1a\u76f8\u52a0\u540e\u8fdb\u884c\u8fdb\u4f4d\u64cd\u4f5c\u5373\u53ef\u3002 \u56e0\u6b64\u76f4\u63a5\u7b97 f(2^i) \uff0c\u518d\u5bf9 x \u4e8c\u8fdb\u5236\u5206\u89e3\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\u3002\u590d\u6742\u5ea6\u6b63\u597d\u662f O(n^2 \\log x) \u3002 \u8981\u6c42 f(2^i) \u5728 O(n^2) \u5185\u6c42\u51fa\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u5f88\u5bbd\u5bb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u6a21\u62df\u3002 Code #include<bits/stdc++.h> using namespace std; using ll = long long; using Matrix = vector<vector<int>>; void work(Matrix& m, int x, int y) { int mr = m.size(); int mc = m[0].size(); if(m[x][y] == 0 || m[x][y] == 1) return; else { int rm = m[x][y] / 2; m[x][y] = m[x][y] % 2; if(x + 1 < mr) { m[x + 1][y] += rm; // logically, should have this line // but actually this line does not do anything // since for adding up two matrices // x, y is upmost two(since previous work has been done) // and adding this line will cause TLE // work(m, x + 1, y); } if(y + 1 < mc) { m[x][y + 1] += rm; } } return; } void mul(Matrix& m) { int mr = m.size(); int mc = m[0].size(); for(int i = 0; i < mr; ++i) { for(int j = 0;j < mc; ++j) { m[i][j] += m[i][j]; } } for(int i = 0; i < mr; ++i) { for(int j = 0;j < mc; ++j) { if(m[i][j] != 0) work(m, i, j); } } } void add(Matrix& to, Matrix& off) { int s = to.size(); for(int i = 0; i < s; ++i) { for(int j = 0; j < s; ++j) { to[i][j] += off[i][j]; work(to, i, j); } } } int main( ) { ll n, x; cin >> n >> x; Matrix m(n + 1, vector<int>(n + 1, 0)); m[0][0] = 1; Matrix res(n + 1, vector<int>(n + 1, 0)); for(int i = 0; i < n + 1; ++i) { if(x & 1) { add(res, m); } mul(m); x >>= 1; if(x == 0) break; } for(int i = 0; i < n + 1; ++i) { for(int j = 0; j < n + 1; ++j) { printf(\"%d \", res[i][j]); } cout << '\\n'; } return 0; }","title":"\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570"},{"location":"09/03/#_1","text":"https://www.matiji.net/exam/dohomework/8235/5","title":"\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570"},{"location":"09/03/#_2","text":"\u5c0f\u7801\u54e5\u6700\u8fd1\u5728\u5b66\u4e60\u4e8c\u8fdb\u5236\u6570\u3002 \u6709\u4e00\u5929\uff0c\u5c0f\u7801\u54e5\u60f3\u5230\u4f20\u7edf\u7684\u4e8c\u8fdb\u5236\u6570\u90fd\u662f\u4e00\u7ef4\u7684\uff0c\u662f\u5426\u80fd\u5b9a\u4e49\u4e00\u79cd\u4e8c\u7ef4\u7684\u4e8c\u8fdb\u5236\u6570\u3002 \u5c0f\u7801\u54e5\u5c06\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u5b9a\u4e49\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff1a \u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u4e3a\u4e00\u4e2a 0/1 \u77e9\u9635\uff0c\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff1b \u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u4e0e\u6b63\u5e38\u81ea\u7136\u6570\u5f62\u6210\u53cc\u5c04\u5173\u7cfb\uff0c\u4e0d\u59a8\u8bb0\u8fd9\u79cd\u5173\u7cfb\u4e3a f \uff1b \u5b9a\u4e49\u51680\u77e9\u9635\u6240\u5bf9\u5e94\u7684\u6574\u6570\u503c\u4e3a 0\uff0c\u5373 f(0)=A \uff0c A \u4e3a\u5168 0 \u77e9\u9635\uff1b \u82e5 f(x)=A , f(x + 1)=B \uff0c\u5219 A \u4e0e B \u6709\u4ee5\u4e0b\u5bf9\u5e94\u5173\u7cfb\uff0c\u6211\u4eec\u5bf9 A \u7684 (0\uff0c0) \u8fd9\u4e00\u4f4d\u52a0\u4e00\uff0c\u5e76\u8fdb\u884c\u8fdb\u4f4d\u64cd\u4f5c\uff0c\u5219\u80fd\u5f97\u5230\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570 B\uff1b \u8fdb\u4f4d\u64cd\u4f5c\u88ab\u5b9a\u4e49\u5982\u4e0b\uff1a\u82e5 S_{i,j}=1 \uff0c\u5e76\u4e14\u5728\u8fd9\u4e00\u4f4d\u4e0a\u52a01\u65f6\uff0c\u4f1a\u53d1\u751f\u5982\u4e0b\u8fdb\u4f4d\uff1a\u4f7f S_{i,j}=0 \uff0c\u5e76\u5728 S_{i + 1,j}=1 S_{i,j + 1}=1 \u4f4d\u4e0a\u52a01\u3002 \u5c0f\u7801\u54e5\u60f3\u77e5\u9053\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684 x \uff0c\u5176\u5bf9\u4e8e\u7684\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u4e3a\u591a\u5c11\uff0c\u5373f\uff08x\uff09\u4e3a\u591a\u5c11\uff0c\u7531\u4e8e\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u53ef\u80fd\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8f93\u51faf\uff08x\uff09\u7684\u4e0b\u6807\u4ece0\u5230n\u3002","title":"\u9898\u5e72"},{"location":"09/03/#_3","text":"n \\leq 1000, x \\leq 10^{18} \uff0c\u663e\u7136\u590d\u6742\u5ea6\u5927\u6982 O(n^2 \\log x) \u4ee5\u4e0b\u3002 O(n^2) \u53ef\u4ee5\u904d\u5386\u77e9\u9635\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u53ef\u4ee5\u904d\u5386 O(\\log x) \u6b21\u77e9\u9635\u3002 \u663e\u7136 f \u662f\u540c\u6001\uff0c\u56e0\u6b64\u77e9\u9635\u548c\u7b49\u4e8e\u6570\u7684\u548c\u3002\u800c\u4e14\u5f97\u5230\u7684\u7684\u77e9\u9635\u663e\u7136\u662f\u5bf9\u79f0\u7684\uff0c\u56e0\u4e3a f(0) \u662f\u5bf9\u79f0\u7684\uff0c\u800c\u6240\u6709\u7684\u8fdb\u4f4d\u64cd\u4f5c\u4e5f\u662f\u5bf9\u79f0\u7684\u3002 \u540c\u65f6\uff0c\u4efb\u610f\u4e24\u4e2a\u77e9\u9635\u7684\u52a0\u6cd5\u4e5f\u662f\u663e\u7136\u7684\uff1a\u76f8\u52a0\u540e\u8fdb\u884c\u8fdb\u4f4d\u64cd\u4f5c\u5373\u53ef\u3002 \u56e0\u6b64\u76f4\u63a5\u7b97 f(2^i) \uff0c\u518d\u5bf9 x \u4e8c\u8fdb\u5236\u5206\u89e3\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\u3002\u590d\u6742\u5ea6\u6b63\u597d\u662f O(n^2 \\log x) \u3002 \u8981\u6c42 f(2^i) \u5728 O(n^2) \u5185\u6c42\u51fa\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u5f88\u5bbd\u5bb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u6a21\u62df\u3002","title":"\u601d\u8def"},{"location":"09/03/#code","text":"#include<bits/stdc++.h> using namespace std; using ll = long long; using Matrix = vector<vector<int>>; void work(Matrix& m, int x, int y) { int mr = m.size(); int mc = m[0].size(); if(m[x][y] == 0 || m[x][y] == 1) return; else { int rm = m[x][y] / 2; m[x][y] = m[x][y] % 2; if(x + 1 < mr) { m[x + 1][y] += rm; // logically, should have this line // but actually this line does not do anything // since for adding up two matrices // x, y is upmost two(since previous work has been done) // and adding this line will cause TLE // work(m, x + 1, y); } if(y + 1 < mc) { m[x][y + 1] += rm; } } return; } void mul(Matrix& m) { int mr = m.size(); int mc = m[0].size(); for(int i = 0; i < mr; ++i) { for(int j = 0;j < mc; ++j) { m[i][j] += m[i][j]; } } for(int i = 0; i < mr; ++i) { for(int j = 0;j < mc; ++j) { if(m[i][j] != 0) work(m, i, j); } } } void add(Matrix& to, Matrix& off) { int s = to.size(); for(int i = 0; i < s; ++i) { for(int j = 0; j < s; ++j) { to[i][j] += off[i][j]; work(to, i, j); } } } int main( ) { ll n, x; cin >> n >> x; Matrix m(n + 1, vector<int>(n + 1, 0)); m[0][0] = 1; Matrix res(n + 1, vector<int>(n + 1, 0)); for(int i = 0; i < n + 1; ++i) { if(x & 1) { add(res, m); } mul(m); x >>= 1; if(x == 0) break; } for(int i = 0; i < n + 1; ++i) { for(int j = 0; j < n + 1; ++j) { printf(\"%d \", res[i][j]); } cout << '\\n'; } return 0; }","title":"Code"},{"location":"09/04/","text":"\u793e\u56e2\u6d3b\u52a8 https://www.matiji.net/exam/dohomework/8235/4?type=6 \u9898\u5e72 \u5c0f\u7801\u5f1f\u6b63\u5728\u7ec4\u7ec7\u793e\u56e2\u6d3b\u52a8\u3002 \u793e\u56e2\u6d3b\u52a8\u4e00\u5171\u6709 n \u4e2a\u9879\u76ee\uff0c\u7b2c i \u4e2a\u9879\u76ee\u5c06\u4e8e\u7b2c l_i \u5929\u5230\u7b2c r_i \u5929\u8fdb\u884c\u3002 \u793e\u56e2\u4e2d\u6709 m \u4e2a\u793e\u5458\uff0c\u7b2c j \u4f4d\u793e\u5458\u5c06\u5728\u7b2c a \u5230\u7b2c b \u5929\u6709\u65f6\u95f4\u53c2\u52a0\u9879\u76ee\uff0c\u4e00\u4f4d\u793e\u5458\u6bcf\u5929\u53ef\u4ee5\u53c2\u52a0\u591a\u4e2a\u9879\u76ee\u3002 \u5c0f\u7801\u5f1f\u60f3\u77e5\u9053\u6bcf\u4f4d\u793e\u5458\u5206\u522b\u6700\u591a\u80fd\u5b8c\u6574\u5b8c\u6210\u51e0\u4e2a\u9879\u76ee\u3002 \u601d\u8def \u5373\u7ed9\u5b9a n \u4e2a\u533a\u95f4 [l_i, r_i] \uff0c m \u4e2a\u533a\u95f4 [a_i, b_i] \uff0c\u6c42\u6bcf\u4e2a [a_i, b_i] \u5305\u542b\u7684 [l_i, r_i] \u533a\u95f4\u4e2a\u6570\u3002 n \\leq 1e5, m \\leq 1e5, r_i \\leq 1e5, l_i \\leq 1e5 \uff0c\u590d\u6742\u5ea6\u5927\u6982\u662f O((n + m) log (n + m)) \u7684\u5f62\u5f0f\u3002\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u770b\u8d77\u6765\u4e0d\u592a\u53ef\u80fd\uff0c\u56e0\u6b64\u5e94\u5f53\u6709 log \u9879\u3002 log \u9879\u8fd9\u91cc\u5e94\u8be5\u662f\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u3002\u8fd9\u91cc\u7528\u6811\u72b6\u6570\u7ec4\u505a\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\uff0c\u5c06\u6240\u6709\u6ee1\u8db3 l_i \\geq a_i \u7684\u9879\u76ee\u653e\u5165\u6811\u72b6\u6570\u7ec4\uff0c\u7136\u540e\u7edf\u8ba1\u6ee1\u8db3 r_i \\leq b_i \u7684\u9879\u76ee\u4e2a\u6570\u3002\u8fd9\u91cc\u7684\u653e\u5165\u662f\u5bf9\u53f3\u7aef\u70b9\u8fdb\u884c\u8ba1\u6570\uff0c\u540e\u4e00\u6b65\u5219\u662f\u6307\u533a\u95f4\u6c42\u548c\u3002 \u8fd9\u6837\u4f1a\u5bfc\u81f4\u5e73\u65b9\u4e58\u5bf9\u6570\u5f62\u5f0f\u7684\u590d\u6742\u5ea6\u3002\u8003\u8651\u5148\u628a\u9879\u76ee\u548c\u67e5\u8be2\u90fd\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u8fd9\u6837\u6bcf\u6b21\u6dfb\u52a0\u9879\u76ee\u65f6\uff0c\u4e0d\u9700\u8981\u904d\u5386\u8bb0\u5f55\uff0c\u53ea\u8981\u4ece\u4e0a\u6b21\u7ed3\u675f\u7684\u9879\u76ee\u7ee7\u7eed\u6dfb\u52a0\u5373\u53ef\u3002 \u4ee3\u7801 #include <iostream> #include <vector> #include <algorithm> using namespace std; // \u9879\u76ee\u7ed3\u6784\u4f53\uff0c\u8868\u793a\u9879\u76ee\u7684\u8d77\u59cb\u65f6\u95f4 l \u548c\u7ed3\u675f\u65f6\u95f4 r struct Project { int l, r; }; // \u67e5\u8be2\u7ed3\u6784\u4f53\uff0c\u8868\u793a\u793e\u5458\u53ef\u53c2\u52a0\u6d3b\u52a8\u7684\u65f6\u95f4\u533a\u95f4 [a, b] \u4ee5\u53ca\u539f\u59cb\u67e5\u8be2\u7f16\u53f7 id struct Query { int a, b, id; }; // \u6811\u72b6\u6570\u7ec4\u7ed3\u6784\u4f53\uff08Fenwick Tree\uff09\u7684\u5c01\u88c5 struct fenw_tree { int n; // \u6570\u7ec4\u5927\u5c0f vector<int> tree; // \u5185\u90e8\u6570\u7ec4\uff08\u4ece\u4e0b\u6807 1 \u5f00\u59cb\u4f7f\u7528\uff09 // \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u5927\u5c0f\u4e3a n \u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6240\u6709\u503c\u521d\u59cb\u4e3a 0 fenw_tree(int n) : n(n), tree(n + 1, 0) {} // \u66f4\u65b0\u51fd\u6570\uff1a\u5c06\u4e0b\u6807 idx \u5904\u7684\u503c\u52a0\u4e0a delta void update(int idx, int delta) { for (; idx <= n; idx += idx & -idx) { tree[idx] += delta; } } // \u524d\u7f00\u548c\u67e5\u8be2\uff1a\u8fd4\u56de\u533a\u95f4 [1, idx] \u5185\u7684\u7d2f\u52a0\u548c int query(int idx) { int sum = 0; for (; idx > 0; idx -= idx & -idx) { sum += tree[idx]; } return sum; } }; int main() { int n, m; cin >> n >> m; // \u8bfb\u5165\u6240\u6709\u9879\u76ee vector<Project> projects(n); for (int i = 0; i < n; i++) { cin >> projects[i].l >> projects[i].r; } // \u8bfb\u5165\u6240\u6709\u67e5\u8be2 vector<Query> queries(m); for (int i = 0; i < m; i++) { cin >> queries[i].a >> queries[i].b; queries[i].id = i; } // \u5c06\u9879\u76ee\u6309 l \u964d\u5e8f\u6392\u5e8f sort(projects.begin(), projects.end(), [](const Project &p1, const Project &p2) { return p1.l > p2.l; }); // \u5c06\u67e5\u8be2\u6309 a \u964d\u5e8f\u6392\u5e8f sort(queries.begin(), queries.end(), [](const Query &q1, const Query &q2) { return q1.a > q2.a; }); // \u5929\u6570\u7684\u4e0a\u754c\uff08\u9898\u4e2d\u89c4\u5b9a\u6700\u5927\u5929\u6570\u4e3a 100000\uff09 const int max_day = 100000; // \u6784\u9020\u4e00\u4e2a\u5927\u5c0f\u4e3a max_day \u7684\u6811\u72b6\u6570\u7ec4\uff08\u4e0b\u6807\u8303\u56f4 [1, max_day]\uff09 fenw_tree bit(max_day); // answer \u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u67e5\u8be2\u7684\u7b54\u6848 vector<int> answer(m, 0); int proj_idx = 0; // \u9010\u4e2a\u5904\u7406\u67e5\u8be2 // \u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2 q\uff0c\u5176\u8981\u6c42\u9879\u76ee\u5fc5\u987b\u6ee1\u8db3 l >= q.a \u4e14 r <= q.b // \u5148\u628a\u6240\u6709\u6ee1\u8db3 l >= q.a \u7684\u9879\u76ee\u52a0\u5165\u6811\u72b6\u6570\u7ec4\uff08\u4ee5\u5176 r \u4f5c\u4e3a\u4e0b\u6807\u66f4\u65b0\uff09\uff0c // \u7136\u540e\u5bf9\u6811\u72b6\u6570\u7ec4\u67e5\u8be2 [1, q.b] \u7684\u524d\u7f00\u548c\u5373\u53ef\u5f97\u5230\u7b54\u6848 for (const auto &q : queries) { while (proj_idx < n && projects[proj_idx].l >= q.a) { // \u5728\u9879\u76ee\u7684\u7ed3\u675f\u65f6\u95f4 r \u5904\u52a0 1 bit.update(projects[proj_idx].r, 1); proj_idx++; } // \u67e5\u8be2 [1, q.b] \u5f97\u5230\u7684\u5c31\u662f r <= q.b \u7684\u9879\u76ee\u6570 answer[q.id] = bit.query(q.b); } // \u6309\u539f\u59cb\u67e5\u8be2\u987a\u5e8f\u8f93\u51fa\u7b54\u6848 for (int i = 0; i < m; i++) { cout << answer[i] << \"\\n\"; } return 0; } \u8fd9\u91cc\u628a\u6811\u72b6\u6570\u7ec4\u6362\u6210\u7ebf\u6bb5\u6811\u6548\u679c\u4e00\u6837\u3002","title":"\u793e\u56e2\u6d3b\u52a8"},{"location":"09/04/#_1","text":"https://www.matiji.net/exam/dohomework/8235/4?type=6","title":"\u793e\u56e2\u6d3b\u52a8"},{"location":"09/04/#_2","text":"\u5c0f\u7801\u5f1f\u6b63\u5728\u7ec4\u7ec7\u793e\u56e2\u6d3b\u52a8\u3002 \u793e\u56e2\u6d3b\u52a8\u4e00\u5171\u6709 n \u4e2a\u9879\u76ee\uff0c\u7b2c i \u4e2a\u9879\u76ee\u5c06\u4e8e\u7b2c l_i \u5929\u5230\u7b2c r_i \u5929\u8fdb\u884c\u3002 \u793e\u56e2\u4e2d\u6709 m \u4e2a\u793e\u5458\uff0c\u7b2c j \u4f4d\u793e\u5458\u5c06\u5728\u7b2c a \u5230\u7b2c b \u5929\u6709\u65f6\u95f4\u53c2\u52a0\u9879\u76ee\uff0c\u4e00\u4f4d\u793e\u5458\u6bcf\u5929\u53ef\u4ee5\u53c2\u52a0\u591a\u4e2a\u9879\u76ee\u3002 \u5c0f\u7801\u5f1f\u60f3\u77e5\u9053\u6bcf\u4f4d\u793e\u5458\u5206\u522b\u6700\u591a\u80fd\u5b8c\u6574\u5b8c\u6210\u51e0\u4e2a\u9879\u76ee\u3002","title":"\u9898\u5e72"},{"location":"09/04/#_3","text":"\u5373\u7ed9\u5b9a n \u4e2a\u533a\u95f4 [l_i, r_i] \uff0c m \u4e2a\u533a\u95f4 [a_i, b_i] \uff0c\u6c42\u6bcf\u4e2a [a_i, b_i] \u5305\u542b\u7684 [l_i, r_i] \u533a\u95f4\u4e2a\u6570\u3002 n \\leq 1e5, m \\leq 1e5, r_i \\leq 1e5, l_i \\leq 1e5 \uff0c\u590d\u6742\u5ea6\u5927\u6982\u662f O((n + m) log (n + m)) \u7684\u5f62\u5f0f\u3002\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u770b\u8d77\u6765\u4e0d\u592a\u53ef\u80fd\uff0c\u56e0\u6b64\u5e94\u5f53\u6709 log \u9879\u3002 log \u9879\u8fd9\u91cc\u5e94\u8be5\u662f\u7ebf\u6bb5\u6811\u6216\u8005\u6811\u72b6\u6570\u7ec4\u3002\u8fd9\u91cc\u7528\u6811\u72b6\u6570\u7ec4\u505a\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\uff0c\u5c06\u6240\u6709\u6ee1\u8db3 l_i \\geq a_i \u7684\u9879\u76ee\u653e\u5165\u6811\u72b6\u6570\u7ec4\uff0c\u7136\u540e\u7edf\u8ba1\u6ee1\u8db3 r_i \\leq b_i \u7684\u9879\u76ee\u4e2a\u6570\u3002\u8fd9\u91cc\u7684\u653e\u5165\u662f\u5bf9\u53f3\u7aef\u70b9\u8fdb\u884c\u8ba1\u6570\uff0c\u540e\u4e00\u6b65\u5219\u662f\u6307\u533a\u95f4\u6c42\u548c\u3002 \u8fd9\u6837\u4f1a\u5bfc\u81f4\u5e73\u65b9\u4e58\u5bf9\u6570\u5f62\u5f0f\u7684\u590d\u6742\u5ea6\u3002\u8003\u8651\u5148\u628a\u9879\u76ee\u548c\u67e5\u8be2\u90fd\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u8fd9\u6837\u6bcf\u6b21\u6dfb\u52a0\u9879\u76ee\u65f6\uff0c\u4e0d\u9700\u8981\u904d\u5386\u8bb0\u5f55\uff0c\u53ea\u8981\u4ece\u4e0a\u6b21\u7ed3\u675f\u7684\u9879\u76ee\u7ee7\u7eed\u6dfb\u52a0\u5373\u53ef\u3002","title":"\u601d\u8def"},{"location":"09/04/#_4","text":"#include <iostream> #include <vector> #include <algorithm> using namespace std; // \u9879\u76ee\u7ed3\u6784\u4f53\uff0c\u8868\u793a\u9879\u76ee\u7684\u8d77\u59cb\u65f6\u95f4 l \u548c\u7ed3\u675f\u65f6\u95f4 r struct Project { int l, r; }; // \u67e5\u8be2\u7ed3\u6784\u4f53\uff0c\u8868\u793a\u793e\u5458\u53ef\u53c2\u52a0\u6d3b\u52a8\u7684\u65f6\u95f4\u533a\u95f4 [a, b] \u4ee5\u53ca\u539f\u59cb\u67e5\u8be2\u7f16\u53f7 id struct Query { int a, b, id; }; // \u6811\u72b6\u6570\u7ec4\u7ed3\u6784\u4f53\uff08Fenwick Tree\uff09\u7684\u5c01\u88c5 struct fenw_tree { int n; // \u6570\u7ec4\u5927\u5c0f vector<int> tree; // \u5185\u90e8\u6570\u7ec4\uff08\u4ece\u4e0b\u6807 1 \u5f00\u59cb\u4f7f\u7528\uff09 // \u6784\u9020\u51fd\u6570\uff0c\u521d\u59cb\u5316\u5927\u5c0f\u4e3a n \u7684\u6811\u72b6\u6570\u7ec4\uff0c\u6240\u6709\u503c\u521d\u59cb\u4e3a 0 fenw_tree(int n) : n(n), tree(n + 1, 0) {} // \u66f4\u65b0\u51fd\u6570\uff1a\u5c06\u4e0b\u6807 idx \u5904\u7684\u503c\u52a0\u4e0a delta void update(int idx, int delta) { for (; idx <= n; idx += idx & -idx) { tree[idx] += delta; } } // \u524d\u7f00\u548c\u67e5\u8be2\uff1a\u8fd4\u56de\u533a\u95f4 [1, idx] \u5185\u7684\u7d2f\u52a0\u548c int query(int idx) { int sum = 0; for (; idx > 0; idx -= idx & -idx) { sum += tree[idx]; } return sum; } }; int main() { int n, m; cin >> n >> m; // \u8bfb\u5165\u6240\u6709\u9879\u76ee vector<Project> projects(n); for (int i = 0; i < n; i++) { cin >> projects[i].l >> projects[i].r; } // \u8bfb\u5165\u6240\u6709\u67e5\u8be2 vector<Query> queries(m); for (int i = 0; i < m; i++) { cin >> queries[i].a >> queries[i].b; queries[i].id = i; } // \u5c06\u9879\u76ee\u6309 l \u964d\u5e8f\u6392\u5e8f sort(projects.begin(), projects.end(), [](const Project &p1, const Project &p2) { return p1.l > p2.l; }); // \u5c06\u67e5\u8be2\u6309 a \u964d\u5e8f\u6392\u5e8f sort(queries.begin(), queries.end(), [](const Query &q1, const Query &q2) { return q1.a > q2.a; }); // \u5929\u6570\u7684\u4e0a\u754c\uff08\u9898\u4e2d\u89c4\u5b9a\u6700\u5927\u5929\u6570\u4e3a 100000\uff09 const int max_day = 100000; // \u6784\u9020\u4e00\u4e2a\u5927\u5c0f\u4e3a max_day \u7684\u6811\u72b6\u6570\u7ec4\uff08\u4e0b\u6807\u8303\u56f4 [1, max_day]\uff09 fenw_tree bit(max_day); // answer \u6570\u7ec4\u5b58\u50a8\u6bcf\u4e2a\u67e5\u8be2\u7684\u7b54\u6848 vector<int> answer(m, 0); int proj_idx = 0; // \u9010\u4e2a\u5904\u7406\u67e5\u8be2 // \u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2 q\uff0c\u5176\u8981\u6c42\u9879\u76ee\u5fc5\u987b\u6ee1\u8db3 l >= q.a \u4e14 r <= q.b // \u5148\u628a\u6240\u6709\u6ee1\u8db3 l >= q.a \u7684\u9879\u76ee\u52a0\u5165\u6811\u72b6\u6570\u7ec4\uff08\u4ee5\u5176 r \u4f5c\u4e3a\u4e0b\u6807\u66f4\u65b0\uff09\uff0c // \u7136\u540e\u5bf9\u6811\u72b6\u6570\u7ec4\u67e5\u8be2 [1, q.b] \u7684\u524d\u7f00\u548c\u5373\u53ef\u5f97\u5230\u7b54\u6848 for (const auto &q : queries) { while (proj_idx < n && projects[proj_idx].l >= q.a) { // \u5728\u9879\u76ee\u7684\u7ed3\u675f\u65f6\u95f4 r \u5904\u52a0 1 bit.update(projects[proj_idx].r, 1); proj_idx++; } // \u67e5\u8be2 [1, q.b] \u5f97\u5230\u7684\u5c31\u662f r <= q.b \u7684\u9879\u76ee\u6570 answer[q.id] = bit.query(q.b); } // \u6309\u539f\u59cb\u67e5\u8be2\u987a\u5e8f\u8f93\u51fa\u7b54\u6848 for (int i = 0; i < m; i++) { cout << answer[i] << \"\\n\"; } return 0; } \u8fd9\u91cc\u628a\u6811\u72b6\u6570\u7ec4\u6362\u6210\u7ebf\u6bb5\u6811\u6548\u679c\u4e00\u6837\u3002","title":"\u4ee3\u7801"},{"location":"09/05/","text":"\u795e\u5947\u7684\u6811 https://www.matiji.net/exam/dohomework/8235/2 \u9898\u5e72 \u5c0f\u7801\u54e5\u5728\u82b1\u56ed\u4e2d\u79cd\u4e86 n \u9897\u795e\u5947\u7684\u6811\uff0c\u82b1\u56ed\u4e2d\u7684\u7b2c i \u9897\u6811 T_i \u6b63\u597d\u662f\u65e0\u6839\u6811 G \u4ee5 i \u8282\u70b9\u4e3a\u6839\u6240\u5f62\u6210\u7684\u6709\u6839\u6811\u3002\uff08 G \u7531\u8f93\u5165\u7ed9\u5b9a\uff09 \u5c0f\u7801\u54e5\u60f3\u77e5\u9053\u5bf9\u4e8e\u6240\u6709\u4ece 1 \u5230 n \u7684 i \uff0c T_i \u4e0e\u82b1\u56ed\u4e2d\u7684\u591a\u5c11\u9897\u6811\u540c\u6784\uff0c\u5373\u96c6\u5408 \\{T_j | 1 \\leq j \\leq n \u4e14 T_j \u4e0e T_i \u540c\u6784\\} \u7684\u5927\u5c0f\uff1f\uff08 T_i \u4e0e T_j \u540c\u6784\u4e5f\u53ef\u7edf\u8ba1\u8fdb\u7b54\u6848\uff09 \u4e24\u68f5\u6709\u6839\u6811 T_1 T_2 \u540c\u6784\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u7684\u5927\u5c0f\u76f8\u7b49\uff0c\u4e14\u5b58\u5728\u4e00\u4e2a\u9876\u70b9\u6392\u5217 \\sigma \u4f7f\u5f97\u5728 T_1 \u4e2d i \u662f j \u7684\u7956\u5148\u5f53\u4e14\u4ec5\u5f53\u5728 T_2 \u4e2d \\sigma(i) \u662f \\sigma(j) \u7684\u7956\u5148\u3002 \u601d\u8def \u6ce8\u610f\u65f6\u95f4\u9650\u5236 3s \u4e0d\u662f 1s \uff0c n \\leq 5e5 \uff0c\u5927\u6982\u662f O(n \\log n) \u4ee5\u4e0b\u3002 \u505a\u6cd5\u662f\u6811 hash\uff0c\u5373\u5bf9\u4e8e\u4e00\u4e2a\u6811\uff0c\u5c06\u5176\u7f16\u7801\u6210 hash\u3002\u7136\u540e\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u662f\u53ef\u4ee5\u76f4\u63a5\u6362\u6839\u7684\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u53ea\u6709 O(n) \u3002 \u6811\u54c8\u5e0c\u7684\u5b9a\u4e49\u4e0e\u8ba1\u7b97\u65b9\u6cd5 \u6811\u54c8\u5e0c\u662f\u4e00\u79cd\u5c06\u6811\u7ed3\u6784\u7f16\u7801\u6210\u4e00\u4e2a\u552f\u4e00\u54c8\u5e0c\u503c\u7684\u65b9\u6cd5\uff0c\u5b83\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u5224\u65ad\u4e24\u68f5\u6811\u662f\u5426 \u540c\u6784 \u3002\u5728\u540c\u6784\u7684\u6811\u4e2d\uff0c\u8282\u70b9\u7684\u76f8\u5bf9\u7ed3\u6784\u662f\u76f8\u540c\u7684\uff0c\u4f46\u8282\u70b9\u7684\u7f16\u53f7\u53ef\u80fd\u4e0d\u540c\u3002 \u6811\u54c8\u5e0c\u7684\u6838\u5fc3\u601d\u60f3 \u6211\u4eec\u901a\u8fc7\u9012\u5f52\u5730\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u54c8\u5e0c\u503c val \uff0c\u5e76\u7ed3\u5408\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u6765\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u6811\u7684\u7ed3\u6784\u3002 \u6811\u54c8\u5e0c\u7684\u5b9a\u4e49\u5305\u542b\u4ee5\u4e0b\u51e0\u70b9\uff1a \u53f6\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c \u662f\u4e00\u4e2a\u56fa\u5b9a\u503c\uff0c\u901a\u5e38\u521d\u59cb\u5316\u4e3a c = 1 \uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u57fa\u672c\u5355\u5143\uff09\u3002 \u975e\u53f6\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c \u7531\u5176\u6240\u6709\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u901a\u8fc7\u67d0\u4e2a\u51fd\u6570\u7ec4\u5408\u5f97\u5230\u3002 \u4e3a\u4e86\u907f\u514d\u54c8\u5e0c\u51b2\u7a81\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u6270\u52a8\u51fd\u6570 f(x) \u5bf9\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u8fdb\u884c\u5904\u7406\uff0c\u4f7f\u54c8\u5e0c\u503c\u66f4\u52a0\u5747\u5300\u5206\u5e03\u3002 \u5177\u4f53\u8ba1\u7b97\u65b9\u6cd5 \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9 i \u7684\u54c8\u5e0c\u503c val[i] \u5982\u4e0b\uff1a \u57fa\u7840\u503c c \uff1a\u6bcf\u4e2a\u8282\u70b9\u81ea\u8eab\u521d\u59cb\u54c8\u5e0c\u503c\u8bbe\u4e3a 1\u3002 \u6270\u52a8\u51fd\u6570 f(x) \uff1a\u7528\u4e8e\u5bf9\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u8fdb\u884c\u6270\u52a8\uff0c\u5e38\u7528\u5f62\u5f0f\u662f\uff1a f(x) = x \\oplus \\text{\u968f\u673a\u6570} \u5176\u4e2d \\oplus \u8868\u793a\u6309\u4f4d\u5f02\u6216\uff0c\u6216\u8005\u53ef\u4ee5\u7528 x \\times 31 + 7 \u7b49\u5176\u4ed6\u64cd\u4f5c\u3002 \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u8ba9\u76f8\u540c\u7ed3\u6784\u4f46\u4e0d\u540c\u5b50\u6811\u6392\u5217\u7684\u8282\u70b9\u4ea7\u751f\u4e0d\u540c\u7684\u4e2d\u95f4\u54c8\u5e0c\u503c\uff0c\u51cf\u5c11\u51b2\u7a81\u3002 \u8282\u70b9\u54c8\u5e0c\u503c\u7684\u8ba1\u7b97\u516c\u5f0f \uff1a \u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 i \uff0c\u5b83\u7684\u54c8\u5e0c\u503c val[i] \u7b49\u4e8e\u81ea\u8eab\u57fa\u7840\u503c c \u52a0\u4e0a\u6240\u6709\u5b50\u8282\u70b9\u7684\u6270\u52a8\u540e\u54c8\u5e0c\u503c\u4e4b\u548c\uff1a val[i] = c + \\sum_{j \\in \\text{\u5b50\u8282\u70b9}(i)} f(val[j]) \u5176\u4e2d f(val[j]) \u662f\u5b50\u8282\u70b9 j \u7684\u54c8\u5e0c\u503c\u7ecf\u8fc7\u6270\u52a8\u51fd\u6570\u5904\u7406\u540e\u7684\u7ed3\u679c\u3002 \u793a\u4f8b \u8003\u8651\u4ee5\u4e0b\u6811\u7ed3\u6784\uff1a 1 / \\ 2 3 / \\ 4 5 \u81ea\u5e95\u5411\u4e0a\u8ba1\u7b97\u54c8\u5e0c\u503c \u53f6\u5b50\u8282\u70b9\uff084 \u548c 5\uff09 \uff1a \u53f6\u5b50\u8282\u70b9\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5b83\u4eec\u7684\u54c8\u5e0c\u503c\u521d\u59cb\u5316\u4e3a c = 1 \uff0c val[4] = 1 \uff0c val[5] = 1 \u3002 \u8282\u70b9 2 \uff08\u5b50\u8282\u70b9\u4e3a 4 \u548c 5\uff09\uff1a val[2] \u7531\u81ea\u8eab\u7684\u521d\u59cb\u503c\u548c\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u51b3\u5b9a\uff1a val[2] = c + f(val[4]) + f(val[5]) \u5047\u8bbe\u6270\u52a8\u51fd\u6570 f(x) = x \\times 31 + 7 \uff0c\u5219\uff1a f(1) = 1 \\times 31 + 7 = 38 \u6240\u4ee5\uff1a val[2] = 1 + 38 + 38 = 77 \u8282\u70b9 3 \uff08\u53f6\u5b50\u8282\u70b9\uff09\uff1a val[3] = c = 1 \u3002 \u6839\u8282\u70b9 1 \uff08\u5b50\u8282\u70b9\u4e3a 2 \u548c 3\uff09\uff1a val[1] \u7531\u81ea\u8eab\u7684\u521d\u59cb\u503c\u548c\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u51b3\u5b9a\uff1a val[1] = c + f(val[2]) + f(val[3]) \u5df2\u77e5 val[2] = 77 \uff0c val[3] = 1 \uff0c\u5e76\u8ba1\u7b97\uff1a f(77) = 77 \\times 31 + 7 = 2394, \\quad f(1) = 38 \u6240\u4ee5\uff1a val[1] = 1 + 2394 + 38 = 2433 \u6700\u7ec8\u7684\u54c8\u5e0c\u503c\uff1a \u8282\u70b9 i \u5b50\u8282\u70b9 val[i] 4 \u65e0 1 5 \u65e0 1 2 4, 5 77 3 \u65e0 1 1 2, 3 2433 \u73b0\u5728\u53ef\u4ee5\u8ba1\u7b97\u4efb\u610f\u6709\u6839\u6811\u7684\u54c8\u5e0c\u4e86\uff0c\u4e0d\u8fc7\u4e0b\u9762\u53ef\u4ee5\u901a\u8fc7\u6362\u6839\u52a0\u901f\u8ba1\u7b97\u3002 \u6362\u6839 \u56e0\u4e3a hash_0(root_0) = c + \\sum_{j \\in \\text{\u65e7\u6811\u5b50\u8282\u70b9}(root_0)} f(hash_1(j)) \u800c\u5982\u679c\u8981\u6362\u5230\u4e00\u4e2a\u76f8\u8fde\u7684 root_1 \uff0c\u90a3\u4e48 hash_1(root_1) = c + \\sum_{j \\in \\text{\u65b0\u6811\u5b50\u8282\u70b9}(root_1)} f(hash_1(j)) \u6ce8\u610f\uff0c\u53ea\u6709 root_0 \u548c root_1 \u7684\u4ece\u5c5e\u5173\u7cfb\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u5176\u5b83\u5b50\u6811\u7684\u54c8\u5e0c\u4e0d\u53d8\uff0c\u56e0\u6b64\u5728\u65b0\u7684\u6811\u91cc\uff0c hash_1(root_0) = c + \\sum_{j \\in \\text{\u65b0\u6811\u5b50\u8282\u70b9}(root_0)} f(hash_1(j))= hash_0(root_0) - hash_0(root_1) \u800c hash_1(root_1) = hash_0(root_1) + hash_1(root_0) \u5bf9\u4e8e\u5176\u5b83\u8282\u70b9\uff0c hash_0(i) = hash_1(i) \u3002\u540c\u65f6\uff0c\u54c8\u5e0c\u89c4\u5219\u4e0d\u53d8\uff0c\u56e0\u6b64\u5b83\u603b\u662f\u4ee3\u8868\u6811\u7684\u7ed3\u6784\u2014\u2014\u5982\u679c\u4e24\u4e2a\u6811\u7684\u7ed3\u6784\u76f8\u540c\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u54c8\u5e0c\u503c\u4e5f\u76f8\u540c\u3002 \u8fd9\u6837\u7a0b\u5e8f\u5b9e\u9645\u590d\u6742\u5ea6\u5728 O(n) \uff0c\u53ef\u80fd\u5e38\u6570\u6bd4\u8f83\u5927\u3002 \u4ee3\u7801 \u4e3a\u4e86\u907f\u514d hash \u78b0\u649e\uff0c\u628a f \u53ef\u4ee5\u4efb\u6027\u5730\u53d6\u590d\u6742\u4e00\u4e9b\u3002 #include <vector> #include <functional> #include <iostream> #include <map> using namespace std; using ull = unsigned long long; constexpr ull mask = 0x1234567898765432; ull f(ull x) { x ^= mask; x ^= x << 7; x ^= x >> 13; x ^= x << 11; x ^= mask; return x; } int main( ) { int n; cin >> n; vector<vector<int>> next(n, vector<int>()); for(int i = 0; i < n - 1; ++i) { int a, b; cin >> a >> b; --a; --b; next[a].push_back(b); next[b].push_back(a); } vector<ull> root_h(n, 0); vector<ull> tmp_h(n, 1); function<void(int,int)> dfs = [&](int cur, int from) { for(int n: next[cur]) { if(n != from) dfs(n, cur); } for(int n: next[cur]) { if(n == from) continue; tmp_h[cur] += f(tmp_h[n]); } }; dfs(0, -1); function<void(int,int)> dfs2 = [&](int cur, int from) { root_h[cur] = tmp_h[cur]; for(int n: next[cur]) { if(n == from) continue; ull next_hash = f(tmp_h[n]); tmp_h[cur] -= next_hash; tmp_h[n] += tmp_h[cur]; dfs2(n, cur); tmp_h[n] -= tmp_h[cur]; tmp_h[cur] += next_hash; } }; dfs2(0, -1); map<ull, int> cnt; for(auto e: root_h) { ++cnt[e]; } for(auto e: root_h) { cout << cnt[e] << endl; } return 0; }","title":"\u795e\u5947\u7684\u6811"},{"location":"09/05/#_1","text":"https://www.matiji.net/exam/dohomework/8235/2","title":"\u795e\u5947\u7684\u6811"},{"location":"09/05/#_2","text":"\u5c0f\u7801\u54e5\u5728\u82b1\u56ed\u4e2d\u79cd\u4e86 n \u9897\u795e\u5947\u7684\u6811\uff0c\u82b1\u56ed\u4e2d\u7684\u7b2c i \u9897\u6811 T_i \u6b63\u597d\u662f\u65e0\u6839\u6811 G \u4ee5 i \u8282\u70b9\u4e3a\u6839\u6240\u5f62\u6210\u7684\u6709\u6839\u6811\u3002\uff08 G \u7531\u8f93\u5165\u7ed9\u5b9a\uff09 \u5c0f\u7801\u54e5\u60f3\u77e5\u9053\u5bf9\u4e8e\u6240\u6709\u4ece 1 \u5230 n \u7684 i \uff0c T_i \u4e0e\u82b1\u56ed\u4e2d\u7684\u591a\u5c11\u9897\u6811\u540c\u6784\uff0c\u5373\u96c6\u5408 \\{T_j | 1 \\leq j \\leq n \u4e14 T_j \u4e0e T_i \u540c\u6784\\} \u7684\u5927\u5c0f\uff1f\uff08 T_i \u4e0e T_j \u540c\u6784\u4e5f\u53ef\u7edf\u8ba1\u8fdb\u7b54\u6848\uff09 \u4e24\u68f5\u6709\u6839\u6811 T_1 T_2 \u540c\u6784\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u7684\u5927\u5c0f\u76f8\u7b49\uff0c\u4e14\u5b58\u5728\u4e00\u4e2a\u9876\u70b9\u6392\u5217 \\sigma \u4f7f\u5f97\u5728 T_1 \u4e2d i \u662f j \u7684\u7956\u5148\u5f53\u4e14\u4ec5\u5f53\u5728 T_2 \u4e2d \\sigma(i) \u662f \\sigma(j) \u7684\u7956\u5148\u3002","title":"\u9898\u5e72"},{"location":"09/05/#_3","text":"\u6ce8\u610f\u65f6\u95f4\u9650\u5236 3s \u4e0d\u662f 1s \uff0c n \\leq 5e5 \uff0c\u5927\u6982\u662f O(n \\log n) \u4ee5\u4e0b\u3002 \u505a\u6cd5\u662f\u6811 hash\uff0c\u5373\u5bf9\u4e8e\u4e00\u4e2a\u6811\uff0c\u5c06\u5176\u7f16\u7801\u6210 hash\u3002\u7136\u540e\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u662f\u53ef\u4ee5\u76f4\u63a5\u6362\u6839\u7684\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u53ea\u6709 O(n) \u3002","title":"\u601d\u8def"},{"location":"09/05/#_4","text":"\u6811\u54c8\u5e0c\u662f\u4e00\u79cd\u5c06\u6811\u7ed3\u6784\u7f16\u7801\u6210\u4e00\u4e2a\u552f\u4e00\u54c8\u5e0c\u503c\u7684\u65b9\u6cd5\uff0c\u5b83\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u5224\u65ad\u4e24\u68f5\u6811\u662f\u5426 \u540c\u6784 \u3002\u5728\u540c\u6784\u7684\u6811\u4e2d\uff0c\u8282\u70b9\u7684\u76f8\u5bf9\u7ed3\u6784\u662f\u76f8\u540c\u7684\uff0c\u4f46\u8282\u70b9\u7684\u7f16\u53f7\u53ef\u80fd\u4e0d\u540c\u3002","title":"\u6811\u54c8\u5e0c\u7684\u5b9a\u4e49\u4e0e\u8ba1\u7b97\u65b9\u6cd5"},{"location":"09/05/#_5","text":"\u6211\u4eec\u901a\u8fc7\u9012\u5f52\u5730\u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u54c8\u5e0c\u503c val \uff0c\u5e76\u7ed3\u5408\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u6765\u552f\u4e00\u786e\u5b9a\u4e00\u68f5\u6811\u7684\u7ed3\u6784\u3002 \u6811\u54c8\u5e0c\u7684\u5b9a\u4e49\u5305\u542b\u4ee5\u4e0b\u51e0\u70b9\uff1a \u53f6\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c \u662f\u4e00\u4e2a\u56fa\u5b9a\u503c\uff0c\u901a\u5e38\u521d\u59cb\u5316\u4e3a c = 1 \uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u57fa\u672c\u5355\u5143\uff09\u3002 \u975e\u53f6\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c \u7531\u5176\u6240\u6709\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u901a\u8fc7\u67d0\u4e2a\u51fd\u6570\u7ec4\u5408\u5f97\u5230\u3002 \u4e3a\u4e86\u907f\u514d\u54c8\u5e0c\u51b2\u7a81\uff0c\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u6270\u52a8\u51fd\u6570 f(x) \u5bf9\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u8fdb\u884c\u5904\u7406\uff0c\u4f7f\u54c8\u5e0c\u503c\u66f4\u52a0\u5747\u5300\u5206\u5e03\u3002","title":"\u6811\u54c8\u5e0c\u7684\u6838\u5fc3\u601d\u60f3"},{"location":"09/05/#_6","text":"\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9 i \u7684\u54c8\u5e0c\u503c val[i] \u5982\u4e0b\uff1a \u57fa\u7840\u503c c \uff1a\u6bcf\u4e2a\u8282\u70b9\u81ea\u8eab\u521d\u59cb\u54c8\u5e0c\u503c\u8bbe\u4e3a 1\u3002 \u6270\u52a8\u51fd\u6570 f(x) \uff1a\u7528\u4e8e\u5bf9\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u8fdb\u884c\u6270\u52a8\uff0c\u5e38\u7528\u5f62\u5f0f\u662f\uff1a f(x) = x \\oplus \\text{\u968f\u673a\u6570} \u5176\u4e2d \\oplus \u8868\u793a\u6309\u4f4d\u5f02\u6216\uff0c\u6216\u8005\u53ef\u4ee5\u7528 x \\times 31 + 7 \u7b49\u5176\u4ed6\u64cd\u4f5c\u3002 \u8fd9\u4e2a\u51fd\u6570\u7684\u4f5c\u7528\u662f\u8ba9\u76f8\u540c\u7ed3\u6784\u4f46\u4e0d\u540c\u5b50\u6811\u6392\u5217\u7684\u8282\u70b9\u4ea7\u751f\u4e0d\u540c\u7684\u4e2d\u95f4\u54c8\u5e0c\u503c\uff0c\u51cf\u5c11\u51b2\u7a81\u3002 \u8282\u70b9\u54c8\u5e0c\u503c\u7684\u8ba1\u7b97\u516c\u5f0f \uff1a \u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 i \uff0c\u5b83\u7684\u54c8\u5e0c\u503c val[i] \u7b49\u4e8e\u81ea\u8eab\u57fa\u7840\u503c c \u52a0\u4e0a\u6240\u6709\u5b50\u8282\u70b9\u7684\u6270\u52a8\u540e\u54c8\u5e0c\u503c\u4e4b\u548c\uff1a val[i] = c + \\sum_{j \\in \\text{\u5b50\u8282\u70b9}(i)} f(val[j]) \u5176\u4e2d f(val[j]) \u662f\u5b50\u8282\u70b9 j \u7684\u54c8\u5e0c\u503c\u7ecf\u8fc7\u6270\u52a8\u51fd\u6570\u5904\u7406\u540e\u7684\u7ed3\u679c\u3002","title":"\u5177\u4f53\u8ba1\u7b97\u65b9\u6cd5"},{"location":"09/05/#_7","text":"\u8003\u8651\u4ee5\u4e0b\u6811\u7ed3\u6784\uff1a 1 / \\ 2 3 / \\ 4 5","title":"\u793a\u4f8b"},{"location":"09/05/#_8","text":"\u53f6\u5b50\u8282\u70b9\uff084 \u548c 5\uff09 \uff1a \u53f6\u5b50\u8282\u70b9\u6ca1\u6709\u5b50\u8282\u70b9\uff0c\u5b83\u4eec\u7684\u54c8\u5e0c\u503c\u521d\u59cb\u5316\u4e3a c = 1 \uff0c val[4] = 1 \uff0c val[5] = 1 \u3002 \u8282\u70b9 2 \uff08\u5b50\u8282\u70b9\u4e3a 4 \u548c 5\uff09\uff1a val[2] \u7531\u81ea\u8eab\u7684\u521d\u59cb\u503c\u548c\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u51b3\u5b9a\uff1a val[2] = c + f(val[4]) + f(val[5]) \u5047\u8bbe\u6270\u52a8\u51fd\u6570 f(x) = x \\times 31 + 7 \uff0c\u5219\uff1a f(1) = 1 \\times 31 + 7 = 38 \u6240\u4ee5\uff1a val[2] = 1 + 38 + 38 = 77 \u8282\u70b9 3 \uff08\u53f6\u5b50\u8282\u70b9\uff09\uff1a val[3] = c = 1 \u3002 \u6839\u8282\u70b9 1 \uff08\u5b50\u8282\u70b9\u4e3a 2 \u548c 3\uff09\uff1a val[1] \u7531\u81ea\u8eab\u7684\u521d\u59cb\u503c\u548c\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u54c8\u5e0c\u503c\u51b3\u5b9a\uff1a val[1] = c + f(val[2]) + f(val[3]) \u5df2\u77e5 val[2] = 77 \uff0c val[3] = 1 \uff0c\u5e76\u8ba1\u7b97\uff1a f(77) = 77 \\times 31 + 7 = 2394, \\quad f(1) = 38 \u6240\u4ee5\uff1a val[1] = 1 + 2394 + 38 = 2433 \u6700\u7ec8\u7684\u54c8\u5e0c\u503c\uff1a \u8282\u70b9 i \u5b50\u8282\u70b9 val[i] 4 \u65e0 1 5 \u65e0 1 2 4, 5 77 3 \u65e0 1 1 2, 3 2433 \u73b0\u5728\u53ef\u4ee5\u8ba1\u7b97\u4efb\u610f\u6709\u6839\u6811\u7684\u54c8\u5e0c\u4e86\uff0c\u4e0d\u8fc7\u4e0b\u9762\u53ef\u4ee5\u901a\u8fc7\u6362\u6839\u52a0\u901f\u8ba1\u7b97\u3002","title":"\u81ea\u5e95\u5411\u4e0a\u8ba1\u7b97\u54c8\u5e0c\u503c"},{"location":"09/05/#_9","text":"\u56e0\u4e3a hash_0(root_0) = c + \\sum_{j \\in \\text{\u65e7\u6811\u5b50\u8282\u70b9}(root_0)} f(hash_1(j)) \u800c\u5982\u679c\u8981\u6362\u5230\u4e00\u4e2a\u76f8\u8fde\u7684 root_1 \uff0c\u90a3\u4e48 hash_1(root_1) = c + \\sum_{j \\in \\text{\u65b0\u6811\u5b50\u8282\u70b9}(root_1)} f(hash_1(j)) \u6ce8\u610f\uff0c\u53ea\u6709 root_0 \u548c root_1 \u7684\u4ece\u5c5e\u5173\u7cfb\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u5176\u5b83\u5b50\u6811\u7684\u54c8\u5e0c\u4e0d\u53d8\uff0c\u56e0\u6b64\u5728\u65b0\u7684\u6811\u91cc\uff0c hash_1(root_0) = c + \\sum_{j \\in \\text{\u65b0\u6811\u5b50\u8282\u70b9}(root_0)} f(hash_1(j))= hash_0(root_0) - hash_0(root_1) \u800c hash_1(root_1) = hash_0(root_1) + hash_1(root_0) \u5bf9\u4e8e\u5176\u5b83\u8282\u70b9\uff0c hash_0(i) = hash_1(i) \u3002\u540c\u65f6\uff0c\u54c8\u5e0c\u89c4\u5219\u4e0d\u53d8\uff0c\u56e0\u6b64\u5b83\u603b\u662f\u4ee3\u8868\u6811\u7684\u7ed3\u6784\u2014\u2014\u5982\u679c\u4e24\u4e2a\u6811\u7684\u7ed3\u6784\u76f8\u540c\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u54c8\u5e0c\u503c\u4e5f\u76f8\u540c\u3002 \u8fd9\u6837\u7a0b\u5e8f\u5b9e\u9645\u590d\u6742\u5ea6\u5728 O(n) \uff0c\u53ef\u80fd\u5e38\u6570\u6bd4\u8f83\u5927\u3002","title":"\u6362\u6839"},{"location":"09/05/#_10","text":"\u4e3a\u4e86\u907f\u514d hash \u78b0\u649e\uff0c\u628a f \u53ef\u4ee5\u4efb\u6027\u5730\u53d6\u590d\u6742\u4e00\u4e9b\u3002 #include <vector> #include <functional> #include <iostream> #include <map> using namespace std; using ull = unsigned long long; constexpr ull mask = 0x1234567898765432; ull f(ull x) { x ^= mask; x ^= x << 7; x ^= x >> 13; x ^= x << 11; x ^= mask; return x; } int main( ) { int n; cin >> n; vector<vector<int>> next(n, vector<int>()); for(int i = 0; i < n - 1; ++i) { int a, b; cin >> a >> b; --a; --b; next[a].push_back(b); next[b].push_back(a); } vector<ull> root_h(n, 0); vector<ull> tmp_h(n, 1); function<void(int,int)> dfs = [&](int cur, int from) { for(int n: next[cur]) { if(n != from) dfs(n, cur); } for(int n: next[cur]) { if(n == from) continue; tmp_h[cur] += f(tmp_h[n]); } }; dfs(0, -1); function<void(int,int)> dfs2 = [&](int cur, int from) { root_h[cur] = tmp_h[cur]; for(int n: next[cur]) { if(n == from) continue; ull next_hash = f(tmp_h[n]); tmp_h[cur] -= next_hash; tmp_h[n] += tmp_h[cur]; dfs2(n, cur); tmp_h[n] -= tmp_h[cur]; tmp_h[cur] += next_hash; } }; dfs2(0, -1); map<ull, int> cnt; for(auto e: root_h) { ++cnt[e]; } for(auto e: root_h) { cout << cnt[e] << endl; } return 0; }","title":"\u4ee3\u7801"}]}